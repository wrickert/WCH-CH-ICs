
demo_consumer.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	1ba0006f          	j	1ba <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	00000236          	.word	0x00000236
   c:	00000234          	.word	0x00000234
	...
  30:	00000234          	.word	0x00000234
  34:	00000000          	.word	0x00000000
  38:	00000234          	.word	0x00000234
  3c:	00000000          	.word	0x00000000
  40:	00000234          	.word	0x00000234
  44:	00000234          	.word	0x00000234
  48:	00000234          	.word	0x00000234
  4c:	00000234          	.word	0x00000234
  50:	00000570          	.word	0x00000570
  54:	00000234          	.word	0x00000234
  58:	00000234          	.word	0x00000234
  5c:	00000234          	.word	0x00000234
  60:	00000234          	.word	0x00000234
  64:	00000234          	.word	0x00000234
  68:	00000234          	.word	0x00000234
  6c:	00000234          	.word	0x00000234
  70:	00000234          	.word	0x00000234
  74:	00000234          	.word	0x00000234
  78:	00000234          	.word	0x00000234
  7c:	00000234          	.word	0x00000234
  80:	00000234          	.word	0x00000234
  84:	00000234          	.word	0x00000234
  88:	00000234          	.word	0x00000234
  8c:	00000234          	.word	0x00000234
  90:	00000234          	.word	0x00000234
  94:	00000234          	.word	0x00000234
  98:	00000234          	.word	0x00000234
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <DelaySysTick>:
  a0:	e000f7b7          	lui	a5,0xe000f
  a4:	479c                	lw	a5,8(a5)
  a6:	e000f737          	lui	a4,0xe000f
  aa:	953e                	add	a0,a0,a5
  ac:	471c                	lw	a5,8(a4)
  ae:	8f89                	sub	a5,a5,a0
  b0:	fe07cee3          	bltz	a5,ac <DelaySysTick+0xc>
  b4:	8082                	ret

000000b6 <internal_handle_input.constprop.0>:
  b6:	e00007b7          	lui	a5,0xe0000
  ba:	0f478793          	addi	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8f4>
  be:	439c                	lw	a5,0(a5)
  c0:	03f7f793          	andi	a5,a5,63
  c4:	17f1                	addi	a5,a5,-4
  c6:	00f05963          	blez	a5,d8 <internal_handle_input.constprop.0+0x22>
}

void handle_debug_input( int numbytes, uint8_t * data )
{
   last = data[0];
   count += numbytes;
  ca:	200006b7          	lui	a3,0x20000
  ce:	0006a703          	lw	a4,0(a3) # 20000000 <count>
  d2:	97ba                	add	a5,a5,a4
  d4:	00f6a023          	sw	a5,0(a3)
	int bytes = (dmd0 & 0x3f) - 4;
	if( bytes > 0 )
	{
		handle_debug_input( bytes, ((uint8_t*)dmdata0) + 1 );
	}
}
  d8:	8082                	ret

000000da <_write.constprop.0>:
  da:	1101                	addi	sp,sp,-32
  dc:	cc22                	sw	s0,24(sp)
  de:	ce06                	sw	ra,28(sp)
  e0:	ca26                	sw	s1,20(sp)
  e2:	c02a                	sw	a0,0(sp)
  e4:	c802                	sw	zero,16(sp)
  e6:	842e                	mv	s0,a1
  e8:	e1f9                	bnez	a1,1ae <_write.constprop.0+0xd4>
  ea:	e00007b7          	lui	a5,0xe0000
  ee:	0f478793          	addi	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8f4>
  f2:	439c                	lw	a5,0(a5)
  f4:	c789                	beqz	a5,fe <_write.constprop.0+0x24>
  f6:	0807f793          	andi	a5,a5,128
  fa:	e391                	bnez	a5,fe <_write.constprop.0+0x24>
  fc:	3f6d                	jal	b6 <internal_handle_input.constprop.0>
  fe:	40f2                	lw	ra,28(sp)
 100:	8522                	mv	a0,s0
 102:	4462                	lw	s0,24(sp)
 104:	44d2                	lw	s1,20(sp)
 106:	6105                	addi	sp,sp,32
 108:	8082                	ret
 10a:	409406b3          	sub	a3,s0,s1
 10e:	461d                	li	a2,7
 110:	8736                	mv	a4,a3
 112:	00d65363          	bge	a2,a3,118 <_write.constprop.0+0x3e>
 116:	471d                	li	a4,7
 118:	00027637          	lui	a2,0x27
 11c:	10160613          	addi	a2,a2,257 # 27101 <rv003usb.c.969c9347+0x24d11>
 120:	00032583          	lw	a1,0(t1)
 124:	0805f513          	andi	a0,a1,128
 128:	ed3d                	bnez	a0,1a6 <_write.constprop.0+0xcc>
 12a:	c981                	beqz	a1,13a <_write.constprop.0+0x60>
 12c:	c61a                	sw	t1,12(sp)
 12e:	c43a                	sw	a4,8(sp)
 130:	c236                	sw	a3,4(sp)
 132:	3751                	jal	b6 <internal_handle_input.constprop.0>
 134:	4332                	lw	t1,12(sp)
 136:	4722                	lw	a4,8(sp)
 138:	4692                	lw	a3,4(sp)
 13a:	0036a693          	slti	a3,a3,3
 13e:	4601                	li	a2,0
 140:	e299                	bnez	a3,146 <_write.constprop.0+0x6c>
 142:	ffd70613          	addi	a2,a4,-3 # e000effd <__global_pointer$+0xc000e7fd>
 146:	4782                	lw	a5,0(sp)
 148:	00348593          	addi	a1,s1,3
 14c:	0808                	addi	a0,sp,16
 14e:	95be                	add	a1,a1,a5
 150:	c41a                	sw	t1,8(sp)
 152:	c23a                	sw	a4,4(sp)
 154:	2209                	jal	256 <memcpy>
 156:	4642                	lw	a2,16(sp)
 158:	4782                	lw	a5,0(sp)
 15a:	e00006b7          	lui	a3,0xe0000
 15e:	4322                	lw	t1,8(sp)
 160:	4712                	lw	a4,4(sp)
 162:	0f868693          	addi	a3,a3,248 # e00000f8 <__global_pointer$+0xbffff8f8>
 166:	c290                	sw	a2,0(a3)
 168:	458d                	li	a1,3
 16a:	00978633          	add	a2,a5,s1
 16e:	4681                	li	a3,0
 170:	00064283          	lbu	t0,0(a2)
 174:	0685                	addi	a3,a3,1
 176:	01068793          	addi	a5,a3,16
 17a:	00278533          	add	a0,a5,sp
 17e:	00550023          	sb	t0,0(a0)
 182:	00d70563          	beq	a4,a3,18c <_write.constprop.0+0xb2>
 186:	0605                	addi	a2,a2,1
 188:	feb694e3          	bne	a3,a1,170 <_write.constprop.0+0x96>
 18c:	00470693          	addi	a3,a4,4
 190:	f806e693          	ori	a3,a3,-128
 194:	00d10823          	sb	a3,16(sp)
 198:	46c2                	lw	a3,16(sp)
 19a:	94ba                	add	s1,s1,a4
 19c:	00d32023          	sw	a3,0(t1)
 1a0:	f684c5e3          	blt	s1,s0,10a <_write.constprop.0+0x30>
 1a4:	bfa9                	j	fe <_write.constprop.0+0x24>
 1a6:	167d                	addi	a2,a2,-1
 1a8:	fe25                	bnez	a2,120 <_write.constprop.0+0x46>
 1aa:	8426                	mv	s0,s1
 1ac:	bf89                	j	fe <_write.constprop.0+0x24>
 1ae:	e0000337          	lui	t1,0xe0000
 1b2:	4481                	li	s1,0
 1b4:	0f430313          	addi	t1,t1,244 # e00000f4 <__global_pointer$+0xbffff8f4>
 1b8:	b7e5                	j	1a0 <_write.constprop.0+0xc6>

000001ba <handle_reset>:
 1ba:	20000197          	auipc	gp,0x20000
 1be:	64618193          	addi	gp,gp,1606 # 20000800 <__global_pointer$>
 1c2:	00018113          	mv	sp,gp
 1c6:	08000513          	li	a0,128
 1ca:	30051073          	csrw	mstatus,a0
 1ce:	468d                	li	a3,3
 1d0:	00000517          	auipc	a0,0x0
 1d4:	e3050513          	addi	a0,a0,-464 # 0 <InterruptVector>
 1d8:	8d55                	or	a0,a0,a3
 1da:	30551073          	csrw	mtvec,a0
 1de:	20000517          	auipc	a0,0x20000
 1e2:	e2250513          	addi	a0,a0,-478 # 20000000 <count>
 1e6:	86418593          	addi	a1,gp,-1948 # 20000064 <_ebss>
 1ea:	4601                	li	a2,0
 1ec:	00b55663          	bge	a0,a1,1f8 <handle_reset+0x3e>
 1f0:	c110                	sw	a2,0(a0)
 1f2:	0511                	addi	a0,a0,4
 1f4:	feb54ee3          	blt	a0,a1,1f0 <handle_reset+0x36>
 1f8:	00001517          	auipc	a0,0x1
 1fc:	8d450513          	addi	a0,a0,-1836 # acc <_data_lma>
 200:	20000597          	auipc	a1,0x20000
 204:	e0058593          	addi	a1,a1,-512 # 20000000 <count>
 208:	20000617          	auipc	a2,0x20000
 20c:	df860613          	addi	a2,a2,-520 # 20000000 <count>
 210:	00c58863          	beq	a1,a2,220 <handle_reset+0x66>
 214:	4114                	lw	a3,0(a0)
 216:	c194                	sw	a3,0(a1)
 218:	0511                	addi	a0,a0,4
 21a:	0591                	addi	a1,a1,4
 21c:	fec59ae3          	bne	a1,a2,210 <handle_reset+0x56>
 220:	e000f7b7          	lui	a5,0xe000f
 224:	4715                	li	a4,5
 226:	c398                	sw	a4,0(a5)
 228:	30000793          	li	a5,768
 22c:	34179073          	csrw	mepc,a5
 230:	30200073          	mret

00000234 <ADC1_IRQHandler>:
 234:	a001                	j	234 <ADC1_IRQHandler>

00000236 <NMI_Handler>:
 236:	40021737          	lui	a4,0x40021
 23a:	471c                	lw	a5,8(a4)
 23c:	008006b7          	lui	a3,0x800
 240:	8fd5                	or	a5,a5,a3
 242:	c71c                	sw	a5,8(a4)

00000244 <strlen>:
 244:	87aa                	mv	a5,a0
 246:	0007c703          	lbu	a4,0(a5) # e000f000 <__global_pointer$+0xc000e800>
 24a:	e701                	bnez	a4,252 <strlen+0xe>
 24c:	40a78533          	sub	a0,a5,a0
 250:	8082                	ret
 252:	0785                	addi	a5,a5,1
 254:	bfcd                	j	246 <strlen+0x2>

00000256 <memcpy>:
 256:	4781                	li	a5,0
 258:	00f61363          	bne	a2,a5,25e <memcpy+0x8>
 25c:	8082                	ret
 25e:	00f58733          	add	a4,a1,a5
 262:	00074683          	lbu	a3,0(a4) # 40021000 <__global_pointer$+0x20020800>
 266:	00f50733          	add	a4,a0,a5
 26a:	0785                	addi	a5,a5,1
 26c:	00d70023          	sb	a3,0(a4)
 270:	b7e5                	j	258 <memcpy+0x2>

00000272 <puts>:
 272:	1151                	addi	sp,sp,-12
 274:	c406                	sw	ra,8(sp)
 276:	c222                	sw	s0,4(sp)
 278:	c026                	sw	s1,0(sp)
 27a:	84aa                	mv	s1,a0
 27c:	37e1                	jal	244 <strlen>
 27e:	842a                	mv	s0,a0
 280:	85aa                	mv	a1,a0
 282:	8526                	mv	a0,s1
 284:	3d99                	jal	da <_write.constprop.0>
 286:	6505                	lui	a0,0x1
 288:	4585                	li	a1,1
 28a:	9bc50513          	addi	a0,a0,-1604 # 9bc <string0+0x4>
 28e:	35b1                	jal	da <_write.constprop.0>
 290:	40a2                	lw	ra,8(sp)
 292:	00140513          	addi	a0,s0,1
 296:	4412                	lw	s0,4(sp)
 298:	4482                	lw	s1,0(sp)
 29a:	0131                	addi	sp,sp,12
 29c:	8082                	ret

0000029e <SystemInit>:
 29e:	400227b7          	lui	a5,0x40022
 2a2:	4705                	li	a4,1
 2a4:	c398                	sw	a4,0(a5)
 2a6:	400217b7          	lui	a5,0x40021
 2aa:	01080737          	lui	a4,0x1080
 2ae:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x20020804>
 2b2:	08170713          	addi	a4,a4,129 # 1080081 <rv003usb.c.969c9347+0x107dc91>
 2b6:	c398                	sw	a4,0(a5)
 2b8:	009f0737          	lui	a4,0x9f0
 2bc:	c798                	sw	a4,8(a5)
 2be:	40021737          	lui	a4,0x40021
 2c2:	431c                	lw	a5,0(a4)
 2c4:	00679693          	slli	a3,a5,0x6
 2c8:	fe06dde3          	bgez	a3,2c2 <SystemInit+0x24>
 2cc:	435c                	lw	a5,4(a4)
 2ce:	400216b7          	lui	a3,0x40021
 2d2:	9bf1                	andi	a5,a5,-4
 2d4:	0027e793          	ori	a5,a5,2
 2d8:	c35c                	sw	a5,4(a4)
 2da:	4721                	li	a4,8
 2dc:	42dc                	lw	a5,4(a3)
 2de:	8bb1                	andi	a5,a5,12
 2e0:	fee79ee3          	bne	a5,a4,2dc <SystemInit+0x3e>
 2e4:	e00007b7          	lui	a5,0xe0000
 2e8:	0f878793          	addi	a5,a5,248 # e00000f8 <__global_pointer$+0xbffff8f8>
 2ec:	0007a023          	sw	zero,0(a5)
 2f0:	e00007b7          	lui	a5,0xe0000
 2f4:	0f478793          	addi	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8f4>
 2f8:	08000713          	li	a4,128
 2fc:	c398                	sw	a4,0(a5)
 2fe:	8082                	ret

00000300 <main>:
{
 300:	1151                	addi	sp,sp,-12
 302:	c406                	sw	ra,8(sp)
 304:	c222                	sw	s0,4(sp)
	SystemInit();
 306:	3f61                	jal	29e <SystemInit>
	Delay_Ms(1); // Ensures USB re-enumeration after bootloader or reset; Spec demand >2.5µs ( TDDIS )
 308:	6531                	lui	a0,0xc
 30a:	b8050513          	addi	a0,a0,-1152 # bb80 <rv003usb.c.969c9347+0x9790>
 30e:	3b49                	jal	a0 <DelaySysTick>
#define LOCAL_CONCAT(A, B) A##B
#define LOCAL_EXP(A, B) LOCAL_CONCAT(A,B)

void usb_setup()
{
	rv003usb_internal_data.se0_windup = 0;
 310:	200007b7          	lui	a5,0x20000
 314:	0207a023          	sw	zero,32(a5) # 20000020 <rv003usb_internal_data+0x18>

	// Enable GPIOs, TIMERs
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
 318:	400216b7          	lui	a3,0x40021
 31c:	4e9c                	lw	a5,24(a3)
	}
#endif

	// GPIO Setup
	LOCAL_EXP( GPIO, USB_PORT )->CFGLR = 
		( LOCAL_EXP( GPIO, USB_PORT )->CFGLR & 
 31e:	fff00637          	lui	a2,0xfff00
 322:	0ff60613          	addi	a2,a2,255 # fff000ff <__global_pointer$+0xdfeff8ff>
	RCC->APB2PCENR |= LOCAL_EXP( RCC_APB2Periph_GPIO, USB_PORT ) | RCC_APB2Periph_AFIO;
 326:	0217e793          	ori	a5,a5,33
 32a:	ce9c                	sw	a5,24(a3)
		( LOCAL_EXP( GPIO, USB_PORT )->CFGLR & 
 32c:	400117b7          	lui	a5,0x40011
 330:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
 334:	4398                	lw	a4,0(a5)
            printf("\nButton 4 SUCCESS!\n");
 336:	6405                	lui	s0,0x1
 338:	8f71                	and	a4,a4,a2
			) )) )
		 |
#ifdef USB_PIN_DPU
		(GPIO_Speed_50MHz | GPIO_CNF_OUT_PP)<<(4*USB_PIN_DPU) |
#endif
		(GPIO_Speed_In | GPIO_CNF_IN_PUPD)<<(4*USB_PIN_DP) | 
 33a:	00039637          	lui	a2,0x39
 33e:	80060613          	addi	a2,a2,-2048 # 38800 <rv003usb.c.969c9347+0x36410>
 342:	8f51                	or	a4,a4,a2
	LOCAL_EXP( GPIO, USB_PORT )->CFGLR = 
 344:	c398                	sw	a4,0(a5)
		(GPIO_Speed_In | GPIO_CNF_IN_PUPD)<<(4*USB_PIN_DM);

	// Configure USB_PIN_DM (D-) as an interrupt on falling edge.
	AFIO->EXTICR = LOCAL_EXP(GPIO_PortSourceGPIO,USB_PORT)<<(USB_PIN_DM*2); // Configure EXTI interrupt for USB_PIN_DM
 346:	0c000613          	li	a2,192
 34a:	40010737          	lui	a4,0x40010
 34e:	c710                	sw	a2,8(a4)
	EXTI->INTENR = 1<<USB_PIN_DM; // Enable EXTI interrupt
 350:	40070713          	addi	a4,a4,1024 # 40010400 <__global_pointer$+0x2000fc00>
 354:	4621                	li	a2,8
 356:	c310                	sw	a2,0(a4)
	EXTI->FTENR = 1<<USB_PIN_DM;  // Enable falling edge trigger for USB_PIN_DM (D-)
 358:	c750                	sw	a2,12(a4)

#ifdef USB_PIN_DPU
	// This drives USB_PIN_DPU (D- Pull-Up) high, which will tell the host that we are going on-bus.
	LOCAL_EXP(GPIO,USB_PORT)->BSHR = 1<<USB_PIN_DPU;
 35a:	4741                	li	a4,16
 35c:	cb98                	sw	a4,16(a5)
 *
 * @return  none
 */
RV_STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 35e:	00100637          	lui	a2,0x100
 362:	e000e737          	lui	a4,0xe000e
 366:	10c72023          	sw	a2,256(a4) # e000e100 <__global_pointer$+0xc000d900>
   funGpioInitAll();
 36a:	4e98                	lw	a4,24(a3)
 36c:	03576713          	ori	a4,a4,53
 370:	ce98                	sw	a4,24(a3)
   funPinMode( PD5, GPIO_CFGLR_IN_PUPD);
 372:	4398                	lw	a4,0(a5)
 374:	ff1006b7          	lui	a3,0xff100
 378:	16fd                	addi	a3,a3,-1 # ff0fffff <__global_pointer$+0xdf0ff7ff>
 37a:	8f75                	and	a4,a4,a3
 37c:	008006b7          	lui	a3,0x800
 380:	8f55                	or	a4,a4,a3
 382:	c398                	sw	a4,0(a5)
   funDigitalWrite( PD5, true);
 384:	02000713          	li	a4,32
 388:	cb98                	sw	a4,16(a5)
   funPinMode( PD6, GPIO_CFGLR_IN_PUPD);
 38a:	4398                	lw	a4,0(a5)
 38c:	f10006b7          	lui	a3,0xf1000
 390:	16fd                	addi	a3,a3,-1 # f0ffffff <__global_pointer$+0xd0fff7ff>
 392:	8f75                	and	a4,a4,a3
 394:	080006b7          	lui	a3,0x8000
 398:	8f55                	or	a4,a4,a3
 39a:	c398                	sw	a4,0(a5)
   funDigitalWrite( PD6, true);
 39c:	04000713          	li	a4,64
 3a0:	cb98                	sw	a4,16(a5)
   funPinMode( PD7, GPIO_CFGLR_IN_PUPD);
 3a2:	4398                	lw	a4,0(a5)
 3a4:	800006b7          	lui	a3,0x80000
 3a8:	0712                	slli	a4,a4,0x4
 3aa:	8311                	srli	a4,a4,0x4
 3ac:	8f55                	or	a4,a4,a3
 3ae:	c398                	sw	a4,0(a5)
   funDigitalWrite( PD7, true);
 3b0:	08000713          	li	a4,128
 3b4:	cb98                	sw	a4,16(a5)
   funPinMode( PA1, GPIO_CFGLR_IN_PUPD);
 3b6:	400117b7          	lui	a5,0x40011
 3ba:	80078793          	addi	a5,a5,-2048 # 40010800 <__global_pointer$+0x20010000>
 3be:	4398                	lw	a4,0(a5)
 3c0:	f0f77713          	andi	a4,a4,-241
 3c4:	08076713          	ori	a4,a4,128
 3c8:	c398                	sw	a4,0(a5)
   funDigitalWrite( PA1, true);
 3ca:	4709                	li	a4,2
 3cc:	cb98                	sw	a4,16(a5)
      if(!funDigitalRead(PD5)){     //    buttonState){
 3ce:	400117b7          	lui	a5,0x40011
 3d2:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
 3d6:	4798                	lw	a4,8(a5)
 3d8:	02077713          	andi	a4,a4,32
 3dc:	e31d                	bnez	a4,402 <main+0x102>
            printf("\nButton 1 SUCCESS!\n");
 3de:	6505                	lui	a0,0x1
 3e0:	9c050513          	addi	a0,a0,-1600 # 9c0 <string0+0x8>
 3e4:	3579                	jal	272 <puts>
            buttons = 1;
 3e6:	4705                	li	a4,1
            Delay_Ms(100);
 3e8:	00494537          	lui	a0,0x494
 3ec:	e0050513          	addi	a0,a0,-512 # 493e00 <rv003usb.c.969c9347+0x491a10>
            buttons = 4;
 3f0:	80e182a3          	sb	a4,-2043(gp) # 20000005 <buttons>
            Delay_Ms(100);
 3f4:	3175                	jal	a0 <DelaySysTick>
      Delay_Ms(100);
 3f6:	00494537          	lui	a0,0x494
 3fa:	e0050513          	addi	a0,a0,-512 # 493e00 <rv003usb.c.969c9347+0x491a10>
 3fe:	314d                	jal	a0 <DelaySysTick>
      if(!funDigitalRead(PD5)){     //    buttonState){
 400:	b7f9                	j	3ce <main+0xce>
      else if(!funDigitalRead(PD6)){     //    buttonState){
 402:	4798                	lw	a4,8(a5)
 404:	04077713          	andi	a4,a4,64
 408:	e719                	bnez	a4,416 <main+0x116>
            printf("\nButton 2 SUCCESS!\n");
 40a:	6505                	lui	a0,0x1
 40c:	9d450513          	addi	a0,a0,-1580 # 9d4 <string0+0x1c>
 410:	358d                	jal	272 <puts>
            buttons = 2;
 412:	4709                	li	a4,2
 414:	bfd1                	j	3e8 <main+0xe8>
      else if(!funDigitalRead(PD7)){     //    buttonState){
 416:	479c                	lw	a5,8(a5)
 418:	0807f793          	andi	a5,a5,128
 41c:	e799                	bnez	a5,42a <main+0x12a>
            printf("\nButton 3 SUCCESS!\n");
 41e:	6505                	lui	a0,0x1
 420:	9e850513          	addi	a0,a0,-1560 # 9e8 <string0+0x30>
 424:	35b9                	jal	272 <puts>
            buttons = 3;
 426:	470d                	li	a4,3
 428:	b7c1                	j	3e8 <main+0xe8>
      else if(!funDigitalRead(PA1)){     //    buttonState){
 42a:	400117b7          	lui	a5,0x40011
 42e:	80078793          	addi	a5,a5,-2048 # 40010800 <__global_pointer$+0x20010000>
 432:	479c                	lw	a5,8(a5)
 434:	8b89                	andi	a5,a5,2
 436:	f3e1                	bnez	a5,3f6 <main+0xf6>
            printf("\nButton 4 SUCCESS!\n");
 438:	9fc40513          	addi	a0,s0,-1540 # 9fc <string0+0x44>
 43c:	3d1d                	jal	272 <puts>
            buttons = 4;
 43e:	4711                	li	a4,4
 440:	b765                	j	3e8 <main+0xe8>

00000442 <usb_pid_handle_in>:
	ist->current_endpoint = endp;
	struct usb_endpoint * e = &ist->eps[endp];

	int tosend = 0;
	uint8_t * sendnow;
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 442:	00561793          	slli	a5,a2,0x5
 446:	00f706b3          	add	a3,a4,a5
	ist->current_endpoint = endp;
 44a:	c310                	sw	a2,0(a4)
	int sendtok = e->toggle_in?0b01001011:0b11000011;
 44c:	528c                	lw	a1,32(a3)
 44e:	0c300693          	li	a3,195
 452:	c199                	beqz	a1,458 <usb_pid_handle_in+0x16>
 454:	04b00693          	li	a3,75

#if RV003USB_HANDLE_IN_REQUEST
	if( e->custom || endp )
 458:	97ba                	add	a5,a5,a4
 45a:	579c                	lw	a5,40(a5)
 45c:	8fd1                	or	a5,a5,a2
 45e:	cfb1                	beqz	a5,4ba <usb_pid_handle_in+0x78>
	if (endp ==1) {
 460:	4785                	li	a5,1
 462:	06f61363          	bne	a2,a5,4c8 <usb_pid_handle_in+0x86>
      if(buttons == 1){
 466:	8051c583          	lbu	a1,-2043(gp) # 20000005 <buttons>
 46a:	20000737          	lui	a4,0x20000
 46e:	00c59b63          	bne	a1,a2,484 <usb_pid_handle_in+0x42>
         consumer_data[0] = 0x01;
 472:	00c70223          	sb	a2,4(a4) # 20000004 <consumer_data.0>
         buttons = 0;
 476:	800182a3          	sb	zero,-2043(gp) # 20000005 <buttons>
      usb_send_data(consumer_data, sizeof(consumer_data), 0, sendtok);
 47a:	4601                	li	a2,0
 47c:	4585                	li	a1,1
 47e:	00470513          	addi	a0,a4,4
	{
		usb_send_empty( sendtok );
	}
	else
	{
		usb_send_data( sendnow, tosend, 0, sendtok );
 482:	ae65                	j	83a <usb_send_data>
      else if(buttons == 2){
 484:	8051c603          	lbu	a2,-2043(gp) # 20000005 <buttons>
 488:	4509                	li	a0,2
 48a:	0ff67593          	zext.b	a1,a2
 48e:	00a61563          	bne	a2,a0,498 <usb_pid_handle_in+0x56>
         consumer_data[0] = 0x02;
 492:	00b70223          	sb	a1,4(a4)
 496:	b7c5                	j	476 <usb_pid_handle_in+0x34>
      else if(buttons == 3){
 498:	8051c603          	lbu	a2,-2043(gp) # 20000005 <buttons>
 49c:	450d                	li	a0,3
 49e:	0ff67593          	zext.b	a1,a2
 4a2:	fea608e3          	beq	a2,a0,492 <usb_pid_handle_in+0x50>
      else if(buttons == 4){
 4a6:	8051c603          	lbu	a2,-2043(gp) # 20000005 <buttons>
 4aa:	4511                	li	a0,4
 4ac:	0ff67593          	zext.b	a1,a2
 4b0:	fea601e3          	beq	a2,a0,492 <usb_pid_handle_in+0x50>
         consumer_data[0] = 0x00;
 4b4:	00070223          	sb	zero,4(a4)
 4b8:	b7c9                	j	47a <usb_pid_handle_in+0x38>
	int offset = (e->count)<<3;
 4ba:	4f5c                	lw	a5,28(a4)
	tosend = (int)e->max_len - offset;
 4bc:	574c                	lw	a1,44(a4)
	uint8_t * tsend = e->opaque;
 4be:	5f08                	lw	a0,56(a4)
	int offset = (e->count)<<3;
 4c0:	078e                	slli	a5,a5,0x3
	tosend = (int)e->max_len - offset;
 4c2:	8d9d                	sub	a1,a1,a5
	if( tosend <= 0 )
 4c4:	00b04463          	bgtz	a1,4cc <usb_pid_handle_in+0x8a>
		usb_send_empty( sendtok );
 4c8:	8536                	mv	a0,a3
 4ca:	a68d                	j	82c <usb_send_empty>
	if( tosend > ENDPOINT0_SIZE ) tosend = ENDPOINT0_SIZE;
 4cc:	4721                	li	a4,8
 4ce:	00b75363          	bge	a4,a1,4d4 <usb_pid_handle_in+0x92>
 4d2:	45a1                	li	a1,8
		usb_send_data( sendnow, tosend, 0, sendtok );
 4d4:	4601                	li	a2,0
 4d6:	953e                	add	a0,a0,a5
 4d8:	b76d                	j	482 <usb_pid_handle_in+0x40>

000004da <usb_pid_handle_data>:
}

void usb_pid_handle_data( uint32_t this_token, uint8_t * data, uint32_t which_data, uint32_t length, struct rv003usb_internal * ist )
{
	//Received data from host.
	int epno = ist->current_endpoint;
 4da:	431c                	lw	a5,0(a4)

	length -= 3;
	uint8_t * data_in = __builtin_assume_aligned( data, 4 );

	// Alrady received this packet.
	if( e->toggle_out != which_data )
 4dc:	0796                	slli	a5,a5,0x5
 4de:	97ba                	add	a5,a5,a4
 4e0:	53d4                	lw	a3,36(a5)
 4e2:	06c69a63          	bne	a3,a2,556 <usb_pid_handle_data+0x7c>
	{
		goto just_ack;
	}

	e->toggle_out = !e->toggle_out;
 4e6:	0016b693          	seqz	a3,a3
 4ea:	d3d4                	sw	a3,36(a5)
#endif
	}
	else
#endif

	if( ist->setup_request )
 4ec:	4714                	lw	a3,8(a4)
 4ee:	c6a5                	beqz	a3,556 <usb_pid_handle_data+0x7c>
		}
#endif

		struct usb_urb * s = __builtin_assume_aligned( (struct usb_urb *)(data_in), 4 );

		uint32_t wvi = s->lValueLSBIndexMSB;
 4f0:	0045d683          	lhu	a3,4(a1)
 4f4:	0025d603          	lhu	a2,2(a1)
		uint32_t wLength = s->wLength;
 4f8:	0065d503          	lhu	a0,6(a1)
		uint32_t wvi = s->lValueLSBIndexMSB;
 4fc:	06c2                	slli	a3,a3,0x10
 4fe:	8ed1                	or	a3,a3,a2
		//int bRequest = s->wRequestTypeLSBRequestMSB >> 8;

		// We shift down because we don't care if USB_RECIP_INTERFACE is set or not.
		// Otherwise we have to write extra code to handle each case if it's set or
		// not set, but in general, there's never a situation where we realy care.
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
 500:	0005d603          	lhu	a2,0(a1)
		e->count = 0;
 504:	0007ae23          	sw	zero,28(a5)
		e->opaque = 0;
 508:	0207ac23          	sw	zero,56(a5)
		e->custom = 0;
 50c:	0207a423          	sw	zero,40(a5)
		e->max_len = 0;
 510:	0207a623          	sw	zero,44(a5)
		ist->setup_request = 0;
 514:	00072423          	sw	zero,8(a4)
		uint32_t reqShl = s->wRequestTypeLSBRequestMSB >> 1;
 518:	8205                	srli	a2,a2,0x1
			// Class request (Will be writing)  This is hid_send_feature_report
			usb_handle_hid_set_report_start( e, wLength, wvi );
		}
		else
#endif
		if( reqShl == (0x0680>>1) ) // GET_DESCRIPTOR = 6 (msb)
 51a:	34000593          	li	a1,832
 51e:	04b61263          	bne	a2,a1,562 <usb_pid_handle_data+0x88>
 522:	6705                	lui	a4,0x1
 524:	a6c70713          	addi	a4,a4,-1428 # a6c <descriptor_list>
 528:	06070593          	addi	a1,a4,96
				if( dl->lIndexValue == wvi )
				{
					e->opaque = (uint8_t*)dl->addr;
					uint16_t swLen = wLength;
					uint16_t elLen = dl->length;
					e->max_len = (swLen < elLen)?swLen:elLen;
 52c:	832a                	mv	t1,a0
				if( dl->lIndexValue == wvi )
 52e:	4310                	lw	a2,0(a4)
 530:	02d61063          	bne	a2,a3,550 <usb_pid_handle_data+0x76>
					e->opaque = (uint8_t*)dl->addr;
 534:	4350                	lw	a2,4(a4)
 536:	df90                	sw	a2,56(a5)
					uint16_t elLen = dl->length;
 538:	00874603          	lbu	a2,8(a4)
					e->max_len = (swLen < elLen)?swLen:elLen;
 53c:	01061293          	slli	t0,a2,0x10
 540:	0102d293          	srli	t0,t0,0x10
 544:	00557363          	bgeu	a0,t0,54a <usb_pid_handle_data+0x70>
 548:	861a                	mv	a2,t1
 54a:	0642                	slli	a2,a2,0x10
 54c:	8241                	srli	a2,a2,0x10
 54e:	d7d0                	sw	a2,44(a5)
			for( i = 0; i < DESCRIPTOR_LIST_ENTRIES; i++ )
 550:	0731                	addi	a4,a4,12
 552:	fcb71ee3          	bne	a4,a1,52e <usb_pid_handle_data+0x54>
		}
	}
just_ack:
	{
		//Got the right data.  Acknowledge.
		usb_send_data( 0, 0, 2, 0xD2 ); // Send ACK
 556:	0d200693          	li	a3,210
 55a:	4609                	li	a2,2
 55c:	4581                	li	a1,0
 55e:	4501                	li	a0,0
 560:	ace9                	j	83a <usb_send_data>
		else if( reqShl == (0x0500>>1) ) // SET_ADDRESS = 0x05
 562:	28000793          	li	a5,640
 566:	fef618e3          	bne	a2,a5,556 <usb_pid_handle_data+0x7c>
			ist->my_address = wvi;
 56a:	c354                	sw	a3,4(a4)
 56c:	b7ed                	j	556 <usb_pid_handle_data+0x7c>
	...

00000570 <EXTI7_0_IRQHandler>:

.section .text.vector_handler
.global EXTI7_0_IRQHandler
.balign 4
EXTI7_0_IRQHandler:
	addi	sp,sp,-80
 570:	715d                	addi	sp,sp,-80
	sw	a0, 0(sp)
 572:	c02a                	sw	a0,0(sp)
	sw	a5, 20(sp)
 574:	ca3e                	sw	a5,20(sp)
	la a5, USB_GPIO_BASE
 576:	400117b7          	lui	a5,0x40011
 57a:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
	c.lw a0, INDR_OFFSET(a5) // MUST check SE0 immediately.
 57e:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK
 580:	8931                	andi	a0,a0,12

	sw	a1, 4(sp)
 582:	c22e                	sw	a1,4(sp)
	sw	a2, 8(sp)
 584:	c432                	sw	a2,8(sp)
	sw	a3, 12(sp)
 586:	c636                	sw	a3,12(sp)
	sw	a4, 16(sp)
 588:	c83a                	sw	a4,16(sp)
	sw	s1, 28(sp)
 58a:	ce26                	sw	s1,28(sp)

	SAVE_DEBUG_MARKER( 48 );
 58c:	d812                	sw	tp,48(sp)
	DEBUG_TICK_SETUP
 58e:	40013237          	lui	tp,0x40013
 592:	c5820213          	addi	tp,tp,-936 # 40012c58 <__global_pointer$+0x20012458>
	c.lw a1, INDR_OFFSET(a5)
 596:	478c                	lw	a1,8(a5)
	c.andi a1, USB_DMASK;
 598:	89b1                	andi	a1,a1,12

	// Finish jump to se0
	c.beqz a0, handle_se0_keepalive
 59a:	22050963          	beqz	a0,7cc <handle_se0_keepalive>

	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 59e:	4788                	lw	a0,8(a5)
 5a0:	8931                	andi	a0,a0,12
 5a2:	02b51b63          	bne	a0,a1,5d8 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5a6:	4788                	lw	a0,8(a5)
 5a8:	8931                	andi	a0,a0,12
 5aa:	02b51763          	bne	a0,a1,5d8 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5ae:	4788                	lw	a0,8(a5)
 5b0:	8931                	andi	a0,a0,12
 5b2:	02b51363          	bne	a0,a1,5d8 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5b6:	4788                	lw	a0,8(a5)
 5b8:	8931                	andi	a0,a0,12
 5ba:	00b51f63          	bne	a0,a1,5d8 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5be:	4788                	lw	a0,8(a5)
 5c0:	8931                	andi	a0,a0,12
 5c2:	00b51b63          	bne	a0,a1,5d8 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5c6:	4788                	lw	a0,8(a5)
 5c8:	8931                	andi	a0,a0,12
 5ca:	00b51763          	bne	a0,a1,5d8 <syncout>
	c.lw a0, INDR_OFFSET(a5); c.andi a0, USB_DMASK; bne a0, a1, syncout
 5ce:	4788                	lw	a0,8(a5)
 5d0:	8931                	andi	a0,a0,12
 5d2:	00b51363          	bne	a0,a1,5d8 <syncout>
	c.j syncout
 5d6:	a009                	j	5d8 <syncout>

000005d8 <syncout>:
syncout:
	sw	s0, 24(sp)
 5d8:	cc22                	sw	s0,24(sp)
	li a2, 0
 5da:	4601                	li	a2,0
	sw	t0, 32(sp)  // XXX NOTE: This is actually unused register - remove some day?
 5dc:	d016                	sw	t0,32(sp)
	sw	t1, 36(sp)
 5de:	d21a                	sw	t1,36(sp)

000005e0 <preamble_loop>:
	
	// This is actually somewhat late.
	// The preamble loop should try to make it earlier.
.balign 4
preamble_loop:
	DEBUG_TICK_MARK
 5e0:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 5e4:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 5e6:	8931                	andi	a0,a0,12
	c.beqz a0, done_usb_message // SE0 here?
 5e8:	18050163          	beqz	a0,76a <done_usb_message>
	c.xor a0, a1;
 5ec:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1.
 5ee:	8da9                	xor	a1,a1,a0
	j 1f; 1: // 4 cycles?
 5f0:	a009                	j	5f2 <preamble_loop+0x12>
	c.beqz a0, done_preamble
 5f2:	c909                	beqz	a0,604 <done_preamble>
	j 1f; 1: // 4 cycles?
 5f4:	a009                	j	5f6 <preamble_loop+0x16>
	c.lw s0, INDR_OFFSET(a5);
 5f6:	4780                	lw	s0,8(a5)
	c.andi s0, USB_DMASK;
 5f8:	8831                	andi	s0,s0,12
	c.xor s0, a1
 5fa:	8c2d                	xor	s0,s0,a1

	// TRICKY: This helps retime the USB sync.
	// If s0 is nonzero, then it's changed (we're going too slow)
	c.bnez s0, 2f;  // This code takes 6 cycles or 8 cycles, depending.
 5fc:	e011                	bnez	s0,600 <preamble_loop+0x20>
	c.j 1f; 1:
 5fe:	a009                	j	600 <preamble_loop+0x20>
	2:
	j preamble_loop // 4 cycles
 600:	b7c5                	j	5e0 <preamble_loop>
 602:	0001                	nop

00000604 <done_preamble>:
.balign 4
done_preamble:
	sw  t2, 40(sp)
 604:	d41e                	sw	t2,40(sp)
	sw  ra, 52(sp)
 606:	da06                	sw	ra,52(sp)
	// 16-byte temporary buffer at 56+sp

	// XXX TODO: Do one byte here to determine the header byte and from that set the CRC.
	c.li s1, 8
 608:	44a1                	li	s1,8

	// This is the first bit that matters.
	c.li s0, 6 // 1 runs.
 60a:	4419                	li	s0,6

	c.nop; 
 60c:	0001                	nop
 60e:	0001                	nop

00000610 <packet_type_loop>:
packet_type_loop:
	// Up here to delay loop a tad, and we need to execute them anyway.
	// TODO: Maybe we could further sync bits here instead of take up time?
	// I.e. can we do what we're doing above, here, and take less time, but sync
	// up when possible.
	li a3, 0xffff // Starting CRC of 0.   Because USB doesn't respect reverse CRCing.
 610:	66c1                	lui	a3,0x10
 612:	16fd                	addi	a3,a3,-1 # ffff <rv003usb.c.969c9347+0xdc0f>
	li a4, 0xa001
 614:	6729                	lui	a4,0xa
 616:	0705                	addi	a4,a4,1 # a001 <rv003usb.c.969c9347+0x7c11>
	addi  t2, sp, DATA_PTR_OFFSET //rv003usb_internal_data
 618:	03f10393          	addi	t2,sp,63
	la  t0, 0x80
 61c:	08000293          	li	t0,128
	c.nop
 620:	0001                	nop
 622:	0001                	nop

	DEBUG_TICK_MARK
 624:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 628:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 62a:	8931                	andi	a0,a0,12
	c.beqz a0, done_usb_message // Not se0 complete, that can't happen here and be valid.
 62c:	12050f63          	beqz	a0,76a <done_usb_message>
	c.xor a0, a1;
 630:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle
 632:	8da9                	xor	a1,a1,a0

	// No CRC for the header.
	//c.srli a0, USB_PIN_DP
	//c.addi a0, 1 // 00 -> 1, 11 -> 100
	//c.andi a0, 1 // If 1, 1 if 0, 0
        c.nop
 634:	0001                	nop
        seqz a0, a0
 636:	00153513          	seqz	a0,a0

	// Write header into byte in reverse order, because we can.
	c.slli a2, 1
 63a:	0606                	slli	a2,a2,0x1
	c.or a2, a0
 63c:	8e49                	or	a2,a2,a0

	// Handle bit stuffing rules.
	c.addi a0, -1 // 0->0xffffffff 1->0
 63e:	157d                	addi	a0,a0,-1
	c.or s0, a0
 640:	8c49                	or	s0,s0,a0
	c.andi s0, 7
 642:	881d                	andi	s0,s0,7
	c.addi s0, -1
 644:	147d                	addi	s0,s0,-1
	c.addi s1, -1
 646:	14fd                	addi	s1,s1,-1
	c.bnez s1, packet_type_loop
 648:	f4e1                	bnez	s1,610 <packet_type_loop>
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	

	// XXX Here, figure out CRC polynomial.

	li s1, (USB_BUFFER_SIZE*8) // # of bits we culd read.
 64a:	06000493          	li	s1,96
	//
	// When we get here, packet type is loaded in A2.
	// If packet type is 0xXX01 or 0xXX11
	// the LSBs are the inverted packet type.
	// we can branch off of bit 2.
	andi a0, a2, 0x0c
 64e:	00c67513          	andi	a0,a2,12

	// if a0 is 1 then it's DATA (full CRC) otheriwse,
	// (0) for setup or PARTIAL CRC.
	// Careful:  This has to take a constant amount of time either way the branch goes.
	c.beqz a0, data_crc
 652:	c509                	beqz	a0,65c <data_crc>
	c.li a4, 0x14	
 654:	4751                	li	a4,20
	c.li a3, 0x1e
 656:	46f9                	li	a3,30
 658:	00000013          	.word	0x00000013

0000065c <data_crc>:

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////	
.balign 4
is_end_of_byte:
	HANDLE_EOB_YES
 65c:	00c38023          	sb	a2,0(t2)
 660:	00138393          	.word	0x00138393

00000664 <bit_process>:
	// end-of-byte.
.balign 4
bit_process:
	// Debug blip
//	c.lw a4, INDR_OFFSET(a5);
	DEBUG_TICK_MARK
 664:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 668:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 66a:	8931                	andi	a0,a0,12
	c.xor a0, a1;
 66c:	8d2d                	xor	a0,a0,a1
#define HANDLE_NEXT_BYTE(is_end_of_byte, jumptype)  \
	c.addi s1, -1; \
	andi a0, s1, 7; /* s1 could be really really big */ \
	c.jumptype a0, is_end_of_byte /* 4 cycles for this section. (Checked) (Sometimes 5)? */ 

	c.beqz a0, handle_one_bit
 66e:	c50d                	beqz	a0,698 <handle_one_bit>

00000670 <handle_zero_bit>:
handle_zero_bit:
	c.xor a1, a0; // Recover a1, for next cycle
 670:	8da9                	xor	a1,a1,a0
	// TODO: Do we have time to do time fixup here?
	// Can we resync time here?
	// If they are different, we need to sloowwww dowwwnnn
	// There is some free time.  Could do something interesting here!!!
	// I was thinking we could put the resync code here.
	c.j 1f; 1:  //Delay 4 cycles.
 672:	a009                	j	674 <handle_zero_bit+0x4>

	c.li s0, 6      // reset runs-of-one.
 674:	4419                	li	s0,6
	c.beqz a1, se0_complete
 676:	c9bd                	beqz	a1,6ec <se0_complete>

	// Handle CRC (0 bit)  (From @Domkeykong)
	slli a0,a3,31 // Put a3s LSB into a0s MSB
 678:	01f69513          	slli	a0,a3,0x1f
	c.srai a0,31    // Copy MSB into all other bits
 67c:	857d                	srai	a0,a0,0x1f
	c.srli a3,1
 67e:	8285                	srli	a3,a3,0x1
	c.and  a0, a4
 680:	8d79                	and	a0,a0,a4
	c.xor  a3, a0
 682:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
 684:	8205                	srli	a2,a2,0x1
	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
 686:	14fd                	addi	s1,s1,-1
 688:	0074f513          	andi	a0,s1,7
 68c:	d961                	beqz	a0,65c <data_crc>
	c.nop
 68e:	0001                	nop
	c.nop
 690:	0001                	nop
	c.nop
 692:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
 694:	f8e1                	bnez	s1,664 <bit_process>
	c.j done_usb_message
 696:	a8d1                	j	76a <done_usb_message>

00000698 <handle_one_bit>:


.balign 4
handle_one_bit:
	c.addi s0, -1; // Count # of runs of 1 (subtract 1)
 698:	147d                	addi	s0,s0,-1
	//HANDLE_CRC (1 bit)
	andi a0, a3, 1
 69a:	0016f513          	andi	a0,a3,1
	c.addi a0, -1
 69e:	157d                	addi	a0,a0,-1
	c.and a0, a4
 6a0:	8d79                	and	a0,a0,a4
	c.srli a3, 1
 6a2:	8285                	srli	a3,a3,0x1
	c.xor a3, a0
 6a4:	8ea9                	xor	a3,a3,a0

	c.srli a2, 1;  // shift a2 down by 1
 6a6:	8205                	srli	a2,a2,0x1
	ori a2, a2, 0x80
 6a8:	08066613          	ori	a2,a2,128
	c.beqz s0, handle_bit_stuff;
 6ac:	c811                	beqz	s0,6c0 <handle_bit_stuff>

	HANDLE_NEXT_BYTE(is_end_of_byte, beqz)
 6ae:	14fd                	addi	s1,s1,-1
 6b0:	0074f513          	andi	a0,s1,7
 6b4:	d545                	beqz	a0,65c <data_crc>
	c.nop // Need extra delay here because we need more time if it's end-of-byte.
 6b6:	0001                	nop
	c.nop
 6b8:	0001                	nop
	c.nop
 6ba:	0001                	nop
	c.bnez s1, bit_process // + 4 cycles
 6bc:	f4c5                	bnez	s1,664 <bit_process>
	c.j done_usb_message
 6be:	a075                	j	76a <done_usb_message>

000006c0 <handle_bit_stuff>:

handle_bit_stuff:
	// We want to wait a little bit, then read another byte, and make
	// sure everything is well, before heading back into the main loop
	// Debug blip
	HANDLE_NEXT_BYTE(not_is_end_of_byte_and_bit_stuffed, bnez)
 6c0:	14fd                	addi	s1,s1,-1
 6c2:	0074f513          	andi	a0,s1,7
 6c6:	e509                	bnez	a0,6d0 <not_is_end_of_byte_and_bit_stuffed>
	HANDLE_EOB_YES
 6c8:	00c38023          	sb	a2,0(t2)
 6cc:	00138393          	.word	0x00138393

000006d0 <not_is_end_of_byte_and_bit_stuffed>:

not_is_end_of_byte_and_bit_stuffed:
        DEBUG_TICK_MARK
 6d0:	00022023          	sw	zero,0(tp) # 0 <InterruptVector>
	c.lw a0, INDR_OFFSET(a5);
 6d4:	4788                	lw	a0,8(a5)
	c.andi a0, USB_DMASK;
 6d6:	8931                	andi	a0,a0,12
	c.beqz a0, se0_complete
 6d8:	c911                	beqz	a0,6ec <se0_complete>
	c.xor a0, a1;
 6da:	8d2d                	xor	a0,a0,a1
	c.xor a1, a0; // Recover a1, for next cycle.
 6dc:	8da9                	xor	a1,a1,a0

	// If A0 is a 0 then that's bad, we just did a bit stuff
        //   and A0 == 0 means there was no signal transition
	c.beqz a0, done_usb_message
 6de:	c551                	beqz	a0,76a <done_usb_message>

        // Reset bit stuff, delay, then continue onto the next actual bit
	c.li s0, 6;
 6e0:	4419                	li	s0,6

        c.nop;
 6e2:	0001                	nop
	nx6p3delay( 2, a0 )
 6e4:	450d                	li	a0,3
 6e6:	157d                	addi	a0,a0,-1
 6e8:	fd7d                	bnez	a0,6e6 <not_is_end_of_byte_and_bit_stuffed+0x16>

	c.bnez s1, bit_process // + 4 cycles
 6ea:	fcad                	bnez	s1,664 <bit_process>

000006ec <se0_complete>:

.balign 4
se0_complete:
	// This is triggered when we finished getting a packet.
	andi a0, s1, 7; // Make sure we received an even number of bytes.
 6ec:	0074f513          	andi	a0,s1,7
	c.bnez a0, done_usb_message
 6f0:	ed2d                	bnez	a0,76a <done_usb_message>


	// Special: handle ACKs?
	// Now we have to decide what we're doing based on the
	// packet type.
	addi  a1, sp, DATA_PTR_OFFSET
 6f2:	03f10593          	addi	a1,sp,63
 6f6:	2188                	.short	0x2188
	XW_C_LBU(a0, a1, 0);	//lbu  a0, 0(a1)
	c.addi a1, 1
 6f8:	0585                	addi	a1,a1,1
	// 1001 => 10010110 => PID IN
	// 0001 => 10000111 => PID_OUT
	// 1101 => 10110100 => SETUP    (OK)

	// a0 contains first 4 bytes.
	la ra, done_usb_message_in // Common return address for all function calls.
 6fa:	00000097          	auipc	ra,0x0
 6fe:	07008093          	addi	ra,ra,112 # 76a <done_usb_message>

	// For ACK don't worry about CRC.
	addi a5, a0, -0b01001011
 702:	fb550793          	addi	a5,a0,-75

	RESTORE_DEBUG_MARKER(48) // restore x4 for whatever in C land.
 706:	5242                	lw	tp,48(sp)

	la a4, rv003usb_internal_data
 708:	20000717          	auipc	a4,0x20000
 70c:	90070713          	addi	a4,a4,-1792 # 20000008 <rv003usb_internal_data>

	// ACK doesn't need good CRC.
	c.beqz a5, usb_pid_handle_ack
 710:	c7c9                	beqz	a5,79a <usb_pid_handle_ack>

	// Next, check for tokens.
	c.bnez a3, crc_for_tokens_would_be_bad_maybe_data
 712:	ea85                	bnez	a3,742 <crc_for_tokens_would_be_bad_maybe_data>

00000714 <may_be_a_token>:
 714:	2192                	.short	0x2192
may_be_a_token:
	// Our CRC is 0, so we might be a token.

	// Do token-y things.
	XW_C_LHU( a2, a1, 0 )
	andi a0, a2, 0x7f // addr
 716:	07f67513          	andi	a0,a2,127
	c.srli a2, 7
 71a:	821d                	srli	a2,a2,0x7
	c.andi a2, 0xf    // endp
 71c:	8a3d                	andi	a2,a2,15
	li s0, ENDPOINTS
 71e:	4409                	li	s0,2
	bgeu a2, s0, done_usb_message // Make sure < ENDPOINTS
 720:	04867563          	bgeu	a2,s0,76a <done_usb_message>
	c.beqz a0,  yes_check_tokens
 724:	c501                	beqz	a0,72c <yes_check_tokens>
 726:	2340                	.short	0x2340
	// Otherwise, we might have our assigned address.
	XW_C_LBU(s0, a4, MY_ADDRESS_OFFSET_BYTES);	//	lbu s0, MY_ADDRESS_OFFSET_BYTES(a4)
	bne s0, a0, done_usb_message // addr != 0 && addr != ours.
 728:	04a41163          	bne	s0,a0,76a <done_usb_message>

0000072c <yes_check_tokens>:
yes_check_tokens:
	addi a5, a5, (0b01001011-0b10000111)
 72c:	fc478793          	addi	a5,a5,-60
	c.beqz a5, usb_pid_handle_out
 730:	cfc1                	beqz	a5,7c8 <usb_pid_handle_out>
	c.addi a5, (0b10000111-0b10010110)
 732:	17c5                	addi	a5,a5,-15
	c.beqz a5, usb_pid_handle_in
 734:	00079463          	bnez	a5,73c <yes_check_tokens+0x10>
 738:	d0bff06f          	j	442 <usb_pid_handle_in>
	c.addi a5, (0b10010110-0b10110100)
 73c:	1789                	addi	a5,a5,-30
	c.beqz a5, usb_pid_handle_setup
 73e:	cbb5                	beqz	a5,7b2 <usb_pid_handle_setup>

	c.j done_usb_message_in
 740:	a02d                	j	76a <done_usb_message>

00000742 <crc_for_tokens_would_be_bad_maybe_data>:

	// CRC is nonzero. (Good for Data packets)
crc_for_tokens_would_be_bad_maybe_data:
	li s0, 0xb001  // UGH: You can't use the CRC16 in reverse :(
 742:	642d                	lui	s0,0xb
 744:	0405                	addi	s0,s0,1 # b001 <rv003usb.c.969c9347+0x8c11>
	c.sub a3, s0
 746:	8e81                	sub	a3,a3,s0
	c.bnez a3, done_usb_message_in
 748:	e28d                	bnez	a3,76a <done_usb_message>
	// Good CRC!!
	sub a3, t2, a1 //a3 = # of bytes read..
 74a:	40b386b3          	sub	a3,t2,a1
	c.addi a3, 1
 74e:	0685                	addi	a3,a3,1
	addi a5, a5, (0b01001011-0b11000011)
 750:	f8878793          	addi	a5,a5,-120
	c.li a2, 0
 754:	4601                	li	a2,0
	c.beqz a5, usb_pid_handle_data
 756:	00079463          	bnez	a5,75e <crc_for_tokens_would_be_bad_maybe_data+0x1c>
 75a:	d81ff06f          	j	4da <usb_pid_handle_data>
	c.addi a5, (0b11000011-0b11010010)
 75e:	17c5                	addi	a5,a5,-15
	c.li a2, 1
 760:	4605                	li	a2,1
	c.beqz a5, usb_pid_handle_data
 762:	00079463          	bnez	a5,76a <done_usb_message>
 766:	d75ff06f          	j	4da <usb_pid_handle_data>

0000076a <done_usb_message>:

done_usb_message:
done_usb_message_in:
	lw	s0, 24(sp)
 76a:	4462                	lw	s0,24(sp)
	lw	s1, 28(sp)
 76c:	44f2                	lw	s1,28(sp)
	lw	t0, 32(sp)
 76e:	5282                	lw	t0,32(sp)
	lw	t1, 36(sp)
 770:	5312                	lw	t1,36(sp)
	lw	t2, 40(sp)
 772:	53a2                	lw	t2,40(sp)
	lw  ra, 52(sp)
 774:	50d2                	lw	ra,52(sp)

00000776 <ret_from_se0>:

ret_from_se0:
	lw	s1, 28(sp)
 776:	44f2                	lw	s1,28(sp)
	RESTORE_DEBUG_MARKER(48)
 778:	5242                	lw	tp,48(sp)
	lw	a2, 8(sp)
 77a:	4622                	lw	a2,8(sp)
	lw	a3, 12(sp)
 77c:	46b2                	lw	a3,12(sp)
	lw	a4, 16(sp)
 77e:	4742                	lw	a4,16(sp)
	lw	a1, 4(sp)
 780:	4592                	lw	a1,4(sp)

00000782 <interrupt_complete>:

interrupt_complete:
	// Acknowledge interrupt.
	// EXTI->INTFR = 1<<4
	c.j 1f; 1: // Extra little bit of delay to make sure we don't accidentally false fire.
 782:	a009                	j	784 <interrupt_complete+0x2>

	la a5, EXTI_BASE + 20
 784:	400107b7          	lui	a5,0x40010
 788:	41478793          	addi	a5,a5,1044 # 40010414 <__global_pointer$+0x2000fc14>
	li a0, (1<<USB_PIN_DM)
 78c:	4521                	li	a0,8
	sw a0, 0(a5)
 78e:	c388                	sw	a0,0(a5)

	// Restore stack.
	lw	a0, 0(sp)
 790:	4502                	lw	a0,0(sp)
	lw	a5, 20(sp)
 792:	47d2                	lw	a5,20(sp)
	addi	sp,sp,80
 794:	6161                	addi	sp,sp,80
	mret
 796:	30200073          	mret

0000079a <usb_pid_handle_ack>:
	return;
}
*/

usb_pid_handle_ack:
	c.lw a2, 0(a4) //ist->current_endpoint -> endp;
 79a:	4310                	lw	a2,0(a4)
	c.slli a2, 5
 79c:	0616                	slli	a2,a2,0x5
	c.add a2, a4
 79e:	963a                	add	a2,a2,a4
	c.addi a2, ENDP_OFFSET // usb_endpoint eps[ENDPOINTS];
 7a0:	0671                	addi	a2,a2,28 # 10001c <rv003usb.c.969c9347+0xfdc2c>

	c.lw a0, (EP_TOGGLE_IN_OFFSET)(a2) // toggle_in=!toggle_in
 7a2:	4248                	lw	a0,4(a2)
	c.li a1, 1
 7a4:	4585                	li	a1,1
	c.xor a0, a1
 7a6:	8d2d                	xor	a0,a0,a1
	c.sw a0, (EP_TOGGLE_IN_OFFSET)(a2)
 7a8:	c248                	sw	a0,4(a2)

	c.lw a0, (EP_COUNT_OFFSET)(a2) // count_in
 7aa:	4208                	lw	a0,0(a2)
	c.addi a0, 1
 7ac:	0505                	addi	a0,a0,1
	c.sw a0, (EP_COUNT_OFFSET)(a2)
 7ae:	c208                	sw	a0,0(a2)

	c.j done_usb_message_in
 7b0:	bf6d                	j	76a <done_usb_message>

000007b2 <usb_pid_handle_setup>:
	e->count = 0;
	e->toggle_in = 1;
	ist->setup_request = 1;
}*/
usb_pid_handle_setup:
	c.sw a2, 0(a4) // ist->current_endpoint = endp
 7b2:	c310                	sw	a2,0(a4)
	c.li a1, 1
 7b4:	4585                	li	a1,1
	c.sw a1, SETUP_REQUEST_OFFSET(a4) //ist->setup_request = 1;
 7b6:	c70c                	sw	a1,8(a4)
	c.slli a2, 3+2
 7b8:	0616                	slli	a2,a2,0x5
	c.add a2, a4
 7ba:	963a                	add	a2,a2,a4
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_IN_OFFSET)(a2) //e->toggle_in = 1;
 7bc:	d20c                	sw	a1,32(a2)
	c.li a1, 0
 7be:	4581                	li	a1,0
	c.sw a1, (ENDP_OFFSET+EP_COUNT_OFFSET)(a2)  //e->count = 0;
 7c0:	ce4c                	sw	a1,28(a2)
	c.sw a1, (ENDP_OFFSET+EP_OPAQUE_OFFSET)(a2)  //e->opaque = 0;
 7c2:	de0c                	sw	a1,56(a2)
	c.sw a1, (ENDP_OFFSET+EP_TOGGLE_OUT_OFFSET)(a2) //e->toggle_out = 0;
 7c4:	d24c                	sw	a1,36(a2)
	c.j done_usb_message_in	
 7c6:	b755                	j	76a <done_usb_message>

000007c8 <usb_pid_handle_out>:
 7c8:	a310                	.short	0xa310
//This will correctly swap back the endpoint.
usb_pid_handle_out:
	//void usb_pid_handle_out( uint32_t addr, uint8_t * data, uint32_t endp, uint32_t unused, struct rv003usb_internal * ist )	
	//sb a2, 0(a4) //ist->current_endpoint = endp;
	XW_C_SB( a2, a4, 0 ); // current_endpoint = endp
	c.j done_usb_message_in
 7ca:	b745                	j	76a <done_usb_message>

000007cc <handle_se0_keepalive>:

handle_se0_keepalive:
	// In here, we want to do smart stuff with the
	// 1ms tick.

	la  a0, SYSTICK_CNT
 7cc:	e000f537          	lui	a0,0xe000f
 7d0:	0521                	addi	a0,a0,8 # e000f008 <__global_pointer$+0xc000e808>
	la a4, rv003usb_internal_data
 7d2:	20000717          	auipc	a4,0x20000
 7d6:	83670713          	addi	a4,a4,-1994 # 20000008 <rv003usb_internal_data>
	c.lw a1, LAST_SE0_OFFSET(a4) //last cycle count   last_se0_cyccount
 7da:	4b0c                	lw	a1,16(a4)
	c.lw a2, 0(a0) //this cycle count
 7dc:	4110                	lw	a2,0(a0)
	c.sw a2, LAST_SE0_OFFSET(a4) //store it back to last_se0_cyccount
 7de:	cb10                	sw	a2,16(a4)
	c.sub a2, a1
 7e0:	8e0d                	sub	a2,a2,a1
	c.sw a2, DELTA_SE0_OFFSET(a4) //record delta_se0_cyccount
 7e2:	cb50                	sw	a2,20(a4)

	li a1, 48000
 7e4:	65b1                	lui	a1,0xc
 7e6:	b8058593          	addi	a1,a1,-1152 # bb80 <rv003usb.c.969c9347+0x9790>
	c.sub a2, a1
 7ea:	8e0d                	sub	a2,a2,a1
	// This is our deviance from 48MHz.

	// Make sure we aren't in left field.
	li a5, 4000
 7ec:	6785                	lui	a5,0x1
 7ee:	fa078793          	addi	a5,a5,-96 # fa0 <_data_lma+0x4d4>
	bge a2, a5, ret_from_se0
 7f2:	f8f652e3          	bge	a2,a5,776 <ret_from_se0>
	li a5, -4000
 7f6:	77fd                	lui	a5,0xfffff
 7f8:	06078793          	addi	a5,a5,96 # fffff060 <__global_pointer$+0xdfffe860>
	blt a2, a5, ret_from_se0
 7fc:	f6f64de3          	blt	a2,a5,776 <ret_from_se0>

	c.lw a1, SE0_WINDUP_OFFSET(a4) // load windup se0_windup
 800:	4f0c                	lw	a1,24(a4)
	c.add a1, a2
 802:	95b2                	add	a1,a1,a2
	c.sw a1, SE0_WINDUP_OFFSET(a4) // save windup
 804:	cf0c                	sw	a1,24(a4)

	// No further adjustments
	beqz a1, ret_from_se0
 806:	d9a5                	beqz	a1,776 <ret_from_se0>

	// 0x40021000 = RCC.CTLR
	la a4, 0x40021000
 808:	40021737          	lui	a4,0x40021
	lw a0, 0(a4)
 80c:	4308                	lw	a0,0(a4)
	srli a2, a0, 3 // Extract HSI Trim.
 80e:	00355613          	srli	a2,a0,0x3
	andi a2, a2, 0b11111
 812:	8a7d                	andi	a2,a2,31
	li a5, 0xffffff07  
 814:	f0700793          	li	a5,-249
	and a0, a0, a5	// Mask off non-HSI
 818:	8d7d                	and	a0,a0,a5

	// Decimate windup - use as HSIrim.
	neg a1, a1
 81a:	40b005b3          	neg	a1,a1
	srai a2, a1, 9
 81e:	4095d613          	srai	a2,a1,0x9
	addi a2, a2, 16  // add hsi offset.
 822:	0641                	addi	a2,a2,16

	// Put trim in place in register.
	slli a2, a2, 3
 824:	060e                	slli	a2,a2,0x3
	or a0, a0, a2
 826:	8d51                	or	a0,a0,a2
	sw a0, 0(a4)
 828:	c308                	sw	a0,0(a4)

	j ret_from_se0
 82a:	b7b1                	j	776 <ret_from_se0>

0000082c <usb_send_empty>:


.balign 4
//void usb_send_empty( uint32_t token );
usb_send_empty:
	c.mv a3, a0
 82c:	86aa                	mv	a3,a0
	la a0, always0
 82e:	00000517          	auipc	a0,0x0
 832:	13a50513          	addi	a0,a0,314 # 968 <always0>
	li a1, 2
 836:	4589                	li	a1,2
	c.mv a2, a1
 838:	862e                	mv	a2,a1

0000083a <usb_send_data>:
//void usb_send_data( uint8_t * data, uint32_t length, uint32_t poly_function, uint32_t token );
usb_send_data:
	addi	sp,sp,-16
 83a:	1141                	addi	sp,sp,-16
	sw	s0, 0(sp)
 83c:	c022                	sw	s0,0(sp)
	sw	s1, 4(sp)
 83e:	c226                	sw	s1,4(sp)

	la a5, USB_GPIO_BASE
 840:	400117b7          	lui	a5,0x40011
 844:	40078793          	addi	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>

	// ASAP: Turn the bus around and send our preamble + token.
	c.lw a4, CFGLR_OFFSET(a5)
 848:	4398                	lw	a4,0(a5)

	li s1, ~((0b1111<<(USB_PIN_DP*4)) | (0b1111<<(USB_PIN_DM*4)))
 84a:	74c1                	lui	s1,0xffff0
 84c:	0ff48493          	addi	s1,s1,255 # ffff00ff <__global_pointer$+0xdffef8ff>
	and a4, s1, a4
 850:	8f65                	and	a4,a4,s1

	// Convert D+/D- into 2MHz outputs
	li s1, ((0b0010<<(USB_PIN_DP*4)) | (0b0010<<(USB_PIN_DM*4)))
 852:	6489                	lui	s1,0x2
 854:	20048493          	addi	s1,s1,512 # 2200 <demo_consumer.c.dc041655+0x2b0>
	or a4, s1, a4
 858:	8f45                	or	a4,a4,s1

	li s1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16))
 85a:	000804b7          	lui	s1,0x80
 85e:	0491                	addi	s1,s1,4 # 80004 <rv003usb.c.969c9347+0x7dc14>
	c.sw s1, BSHR_OFFSET(a5)
 860:	cb84                	sw	s1,16(a5)

	//00: Universal push-pull output mode
	c.sw a4, CFGLR_OFFSET(a5)
 862:	c398                	sw	a4,0(a5)

	li t1, (1<<USB_PIN_DP) | (1<<(USB_PIN_DM+16)) | (1<<USB_PIN_DM) | (1<<(USB_PIN_DP+16));
 864:	000c0337          	lui	t1,0xc0
 868:	0331                	addi	t1,t1,12 # c000c <rv003usb.c.969c9347+0xbdc1c>

	SAVE_DEBUG_MARKER( 8 )
 86a:	c412                	sw	tp,8(sp)

	// Save off our preamble and token.
	c.slli a3, 7     //Put token further up so it gets sent later.
 86c:	069e                	slli	a3,a3,0x7
	ori s0, a3, 0x40  
 86e:	0406e413          	ori	s0,a3,64

	li t0, 0x0000
 872:	4281                	li	t0,0
	c.bnez a2, done_poly_check
 874:	e609                	bnez	a2,87e <done_poly_check>
	li t0, 0xa001
 876:	62a9                	lui	t0,0xa
 878:	0285                	addi	t0,t0,1 # a001 <rv003usb.c.969c9347+0x7c11>
	li a2, 0xffff
 87a:	6641                	lui	a2,0x10
 87c:	167d                	addi	a2,a2,-1 # ffff <rv003usb.c.969c9347+0xdc0f>

0000087e <done_poly_check>:
done_poly_check:

	c.slli a1, 3 // bump up one extra to be # of bits
 87e:	058e                	slli	a1,a1,0x3
	mv t2, a1
 880:	83ae                	mv	t2,a1

	// t0 is our polynomial
	// a2 is our running CRC.
	// a3 is our token.
	DEBUG_TICK_SETUP
 882:	40013237          	lui	tp,0x40013
 886:	c5820213          	addi	tp,tp,-936 # 40012c58 <__global_pointer$+0x20012458>

	c.li a4, 6 // reset bit stuffing.
 88a:	4719                	li	a4,6
	c.li a1, 15 // 15 bits.
 88c:	45bd                	li	a1,15

	//c.nop; c.nop; c.nop;
	c.j pre_and_tok_send_inner_loop
 88e:	a009                	j	890 <pre_and_tok_send_inner_loop>

00000890 <pre_and_tok_send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
 890:	86a2                	mv	a3,s0
	c.srli s0, 1 // Shift down into the next bit.
 892:	8005                	srli	s0,s0,0x1
	c.andi a3, 1
 894:	8a85                	andi	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.

	c.addi a4, -1
 896:	177d                	addi	a4,a4,-1 # 40020fff <__global_pointer$+0x200207ff>
	c.bnez a3, pre_and_tok_send_one_bit
 898:	e681                	bnez	a3,8a0 <pre_and_tok_send_one_bit>
//Send 0 bit. (Flip)
	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
 89a:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
 89e:	4719                	li	a4,6

000008a0 <pre_and_tok_send_one_bit>:
	// DO NOT flip.  Allow a4 to increment.
// Deliberately unaligned for timing purposes.
.balign 4
pre_and_tok_send_one_bit:
	sw s1, BSHR_OFFSET(a5)
 8a0:	cb84                	sw	s1,16(a5)
	//Bit stuffing doesn't happen.
	c.addi a1, -1
 8a2:	15fd                	addi	a1,a1,-1
	c.beqz a1, pre_and_tok_done_sending_data
 8a4:	c591                	beqz	a1,8b0 <pre_and_tok_done_sending_data>
	nx6p3delay( 2, a3 );	c.nop;             // Free time!
 8a6:	468d                	li	a3,3
 8a8:	16fd                	addi	a3,a3,-1
 8aa:	fefd                	bnez	a3,8a8 <pre_and_tok_send_one_bit+0x8>
 8ac:	0001                	nop
	c.j pre_and_tok_send_inner_loop
 8ae:	b7cd                	j	890 <pre_and_tok_send_inner_loop>

000008b0 <pre_and_tok_done_sending_data>:
////////////////////////////////////////////////////////////////////////////

	// We have very little time here.  Just enough to do this.

	//Restore size.
	mv a1, t2//lw  a1, 12(sp)
 8b0:	859e                	mv	a1,t2
	c.beqz a1, no_really_done_sending_data  //No actual payload?  Bail!
 8b2:	c5ad                	beqz	a1,91c <no_really_done_sending_data>
	c.addi a1, -1
 8b4:	15fd                	addi	a1,a1,-1
//	beqz t2, no_really_done_sending_data 

	bnez t0, done_poly_check2
 8b6:	00029463          	bnez	t0,8be <done_poly_check2>
	li a2, 0xffff
 8ba:	6641                	lui	a2,0x10
 8bc:	167d                	addi	a2,a2,-1 # ffff <rv003usb.c.969c9347+0xdc0f>

000008be <done_poly_check2>:
 8be:	0001                	nop

000008c0 <load_next_byte>:
 8c0:	2100                	.short	0x2100
	// CH32v003 has the XW extension.
	// this replaces: lb s0, 0(a0)
	XW_C_LBU(s0, a0, 0);
	//lb s0, 0(a0)
	//	.long 0x00150513 // addi a0, a0, 1  (For alignment's sake)
	c.addi a0, 1
 8c2:	0505                	addi	a0,a0,1

000008c4 <send_inner_loop>:
		* We have to decrement our bit stuffing index.
		* If it is 0, we can reset our bit stuffing index.
	*/

	// a3 is now the lsb of s0 (the 'next bit' to read out)
	c.mv a3, s0
 8c4:	86a2                	mv	a3,s0
	c.andi a3, 1
 8c6:	8a85                	andi	a3,a3,1
	// If a3 is 0, we should FLIP
	// if a3 is 1, we should NOT flip.
	c.beqz a3, send_zero_bit
 8c8:	ce81                	beqz	a3,8e0 <send_zero_bit>
	c.srli s0, 1 // Shift down into the next bit.
 8ca:	8005                	srli	s0,s0,0x1
//send_one_bit:
	//HANDLE_CRC (1 bit)
	andi a3, a2, 1
 8cc:	00167693          	andi	a3,a2,1
	c.addi a3, -1
 8d0:	16fd                	addi	a3,a3,-1
	and a3, a3, t0
 8d2:	0056f6b3          	and	a3,a3,t0
	c.srli a2, 1
 8d6:	8205                	srli	a2,a2,0x1
	c.xor a2, a3
 8d8:	8e35                	xor	a2,a2,a3

	c.addi a4, -1
 8da:	177d                	addi	a4,a4,-1
	c.beqz a4, insert_stuffed_bit
 8dc:	cf25                	beqz	a4,954 <insert_stuffed_bit>
	c.j cont_after_jump
 8de:	a829                	j	8f8 <cont_after_jump>

000008e0 <send_zero_bit>:
//Send 0 bit. (Flip)
.balign 4
send_zero_bit:
	c.srli s0, 1 // Shift down into the next bit.
 8e0:	8005                	srli	s0,s0,0x1
	// a3 is temp
	// t0 is polynomial.

	// XXX WARNING: this was by https://github.com/cnlohr/rv003usb/issues/7 
	// TODO Check me!
	slli a3,a2,31 // Put a3s LSB into a0s MSB
 8e2:	01f61693          	slli	a3,a2,0x1f
	c.srai a3,31    // Copy MSB into all other bits
 8e6:	86fd                	srai	a3,a3,0x1f

	// Flip s1 (our bshr setting) by xoring it.
	// 10.....01
	// 11.....11 (xor with)
	// 01.....10
	xor s1, s1, t1
 8e8:	0064c4b3          	xor	s1,s1,t1
	sw s1, BSHR_OFFSET(a5)
 8ec:	cb84                	sw	s1,16(a5)

	c.li a4, 6 // reset bit stuffing.
 8ee:	4719                	li	a4,6

	// XXX XXX CRC down here to make bit stuffing timings line up.
	c.srli a2,1
 8f0:	8205                	srli	a2,a2,0x1
	and a3,a3,t0
 8f2:	0056f6b3          	and	a3,a3,t0
	c.xor  a2,a3 
 8f6:	8e35                	xor	a2,a2,a3

000008f8 <cont_after_jump>:

.balign 4
cont_after_jump:
send_end_bit_complete:
	c.beqz a1, done_sending_data
 8f8:	c981                	beqz	a1,908 <done_sending_data>
	andi a3, a1, 7
 8fa:	0075f693          	andi	a3,a1,7
	c.addi a1, -1
 8fe:	15fd                	addi	a1,a1,-1
	c.beqz a3, load_next_byte
 900:	d2e1                	beqz	a3,8c0 <load_next_byte>
	// Wait an extra few cycles.
	c.j 1f; 1:
 902:	a009                	j	904 <cont_after_jump+0xc>
	c.j send_inner_loop
 904:	b7c1                	j	8c4 <send_inner_loop>
 906:	0001                	nop

00000908 <done_sending_data>:

.balign 4
done_sending_data:
	// BUT WAIT!! MAYBE WE NEED TO CRC!
	beqz t0, no_really_done_sending_data
 908:	00028a63          	beqz	t0,91c <no_really_done_sending_data>
	srli t0, t0, 8 // reset poly - we don't want it anymore.
 90c:	0082d293          	srli	t0,t0,0x8
	li a1, 7 // Load 8 more bits out
 910:	459d                	li	a1,7
	beqz t0, send_inner_loop  //Second CRC byte
 912:	fa0289e3          	beqz	t0,8c4 <send_inner_loop>
	// First CRC byte
	not s0, a2 // get read to send out the CRC.
 916:	fff64413          	not	s0,a2
	c.j send_inner_loop
 91a:	b76d                	j	8c4 <send_inner_loop>

0000091c <no_really_done_sending_data>:
.balign 4
no_really_done_sending_data:

//	c.bnez a2, poly_function  TODO: Uncomment me!

	nx6p3delay( 2, a3 );
 91c:	468d                	li	a3,3
 91e:	16fd                	addi	a3,a3,-1
 920:	fefd                	bnez	a3,91e <no_really_done_sending_data+0x2>

	// Need to perform an SE0.
	li s1, (1<<(USB_PIN_DM+16)) | (1<<(USB_PIN_DP+16))
 922:	000c04b7          	lui	s1,0xc0
	c.sw s1, BSHR_OFFSET(a5)
 926:	cb84                	sw	s1,16(a5)

	nx6p3delay( 7, a3 );
 928:	46a1                	li	a3,8
 92a:	16fd                	addi	a3,a3,-1
 92c:	fefd                	bnez	a3,92a <no_really_done_sending_data+0xe>

	li s1, (1<<(USB_PIN_DM)) | (1<<(USB_PIN_DP+16))
 92e:	000404b7          	lui	s1,0x40
 932:	04a1                	addi	s1,s1,8 # 40008 <rv003usb.c.969c9347+0x3dc18>
	c.sw s1, BSHR_OFFSET(a5)
 934:	cb84                	sw	s1,16(a5)

	lw s1, CFGLR_OFFSET(a5)
 936:	4384                	lw	s1,0(a5)
	// Convert D+/D- into inputs.
	li a3, ~((0b11<<(USB_PIN_DP*4)) | (0b11<<(USB_PIN_DM*4)))
 938:	76f5                	lui	a3,0xffffd
 93a:	cff68693          	addi	a3,a3,-769 # ffffccff <__global_pointer$+0xdfffc4ff>
	and s1, a3, s1
 93e:	8cf5                	and	s1,s1,a3
	// 01: Floating input mode.
	li a3, ((0b01<<(USB_PIN_DP*4+2)) | (0b01<<(USB_PIN_DM*4+2)))
 940:	6691                	lui	a3,0x4
 942:	40068693          	addi	a3,a3,1024 # 4400 <rv003usb.c.969c9347+0x2010>
	or s1, a3, s1
 946:	8cd5                	or	s1,s1,a3
	sw s1, CFGLR_OFFSET(a5)
 948:	c384                	sw	s1,0(a5)

	lw	s0, 0(sp)
 94a:	4402                	lw	s0,0(sp)
	lw	s1, 4(sp)
 94c:	4492                	lw	s1,4(sp)
	RESTORE_DEBUG_MARKER( 8 )
 94e:	4222                	lw	tp,8(sp)
	addi	sp,sp,16
 950:	0141                	addi	sp,sp,16
	ret
 952:	8082                	ret

00000954 <insert_stuffed_bit>:

.balign 4
// TODO: This seems to be either 222 or 226 (not 224) in cases.
// It's off by 2 clock cycles.  Probably OK, but, hmm.
insert_stuffed_bit:
	nx6p3delay(3, a3)
 954:	4691                	li	a3,4
 956:	16fd                	addi	a3,a3,-1
 958:	fefd                	bnez	a3,956 <insert_stuffed_bit+0x2>
	xor s1, s1, t1
 95a:	0064c4b3          	xor	s1,s1,t1
	c.li a4, 6 // reset bit stuffing.
 95e:	4719                	li	a4,6
	c.nop
 960:	0001                	nop
	c.nop
 962:	0001                	nop
	sw s1, BSHR_OFFSET(a5)
 964:	cb84                	sw	s1,16(a5)
	c.j send_end_bit_complete
 966:	bf49                	j	8f8 <cont_after_jump>

00000968 <always0>:
 968:	00000000          	.word	0x00000000

0000096c <string3>:
 96c:	00300308 00300030 00000000              ..0.0.0.....

00000978 <string2>:
 978:	0052032c 00300056 00330030 00530055     ,.R.V.0.0.3.U.S.
 988:	00200042 00650044 006f006d 00470020     B. .D.e.m.o. .G.
 998:	006d0061 00700065 00640061 00000000     a.m.e.p.a.d.....

000009a8 <string1>:
 9a8:	0043030e 004c004e 0068006f 00000072     ..C.N.L.o.h.r...

000009b8 <string0>:
 9b8:	04090304 0000000a 7475420a 206e6f74     .........Button 
 9c8:	55532031 53454343 00002153 7475420a     1 SUCCESS!...But
 9d8:	206e6f74 55532032 53454343 00002153     ton 2 SUCCESS!..
 9e8:	7475420a 206e6f74 55532033 53454343     .Button 3 SUCCES
 9f8:	00002153 7475420a 206e6f74 55532034     S!...Button 4 SU
 a08:	53454343 00002153                       CCESS!..

00000a10 <consumer_control_hid_desc>:
 a10:	01090c05 001501a1 cd090125 b509e209     ........%.......
 a20:	b509b609 01750595 01950281 01810375     ......u.....u...
 a30:	000000c0                                ....

00000a34 <config_descriptor>:
 a34:	00220209 80000101 00040964 00030100     ..".....d.......
 a44:	21090000 01000111 07002122 03038105     ...!...."!......
 a54:	00000100                                ....

00000a58 <device_descriptor>:
 a58:	01100112 08000003 c0031209 02010002     ................
 a68:	00000103                                ....

00000a6c <descriptor_list>:
 a6c:	00000100 00000a58 00000012 00000200     ....X...........
 a7c:	00000a34 00000022 00002200 00000a10     4..."...."......
 a8c:	00000021 00002100 00000a46 00000009     !....!..F.......
 a9c:	00000300 000009b8 00000004 04090301     ................
 aac:	000009a8 0000000e 04090302 00000978     ............x...
 abc:	0000002c 04090303 0000096c 00000008     ,.......l.......
